# -*- coding: utf-8 -*-
"""Melanoma_Cancer_Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17jeJOq45uCHJMpXgwiWSPoh2Pr7gwede
"""

#TODO

#Persist Model
#Find good score for this model
#Make README for this code
#Put in GitHub Repo


import os
import cv2
import numpy as np
from google.colab import drive
from sklearn.model_selection import train_test_split, KFold, cross_val_score, cross_val_predict, StratifiedKFold
from sklearn.linear_model import SGDClassifier
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, precision_recall_curve, accuracy_score, f1_score
from sklearn.dummy import DummyClassifier
import matplotlib.pyplot as plt
from sklearn.metrics import precision_recall_curve
import joblib

npy_file_path = '/content/drive/My Drive/Melanoma/images.npy'
if not os.path.exists(npy_file_path):
  drive.mount('/content/drive')
  folder_path='/content/drive/My Drive/Melanoma'
  if os.path.exists(folder_path):
      categories = ['train', 'test']
      labels_dict = {'Benign': 0, 'Malignant': 1}

      images = []
      labels = []

      for category in categories:
          category_path = os.path.join(folder_path, category)

          if not os.path.exists(category_path):
              print(f"Category path not found: {category_path}")
              continue

          for label in ['Benign', 'Malignant']:
              label_path = os.path.join(category_path, label)

              if not os.path.exists(label_path):
                  print(f"Label path not found: {label_path}")
                  continue

              for img_name in os.listdir(label_path):
                  img_path = os.path.join(label_path, img_name)

                  if img_name.lower().endswith(('png', 'jpg', 'jpeg')):
                      print(img_path)
                      try:
                          img = cv2.imread(img_path)

                          if img is None:
                              print(f"Warning: Unable to read image {img_path}. Skipping.")
                              continue

                          img_resized = cv2.resize(img, (64, 64))

                          images.append(img_resized)
                          labels.append(labels_dict[label])

                      except Exception as e:
                          print(f"Error processing image {img_path}: {e}")

      images_array = np.array(images)
      labels_array = np.array(labels)
      np.save('/content/drive/My Drive/Melanoma/images.npy', images_array)
      np.save('/content/drive/My Drive/Melanoma/labels.npy', labels_array)
images_array=np.load('/content/drive/My Drive/Melanoma/images.npy')
labels_array=np.load('/content/drive/My Drive/Melanoma/labels.npy')

data = list(zip(images_array, labels_array))

np.random.shuffle(data)

shuffled_images, shuffled_labels = zip(*data)

images_array = np.array(shuffled_images)
labels_array = np.array(shuffled_labels)

X_train, X_test, y_train, y_test = train_test_split(images_array, labels_array, test_size=0.2, random_state=42)

X_train = X_train.reshape(X_train.shape[0], -1)
X_test = X_test.reshape(X_test.shape[0], -1)

sgd_clf=SGDClassifier(random_state=42)
sgd_clf.fit(X_train, y_train)

model_save_path = '/content/drive/My Drive/Melanoma/sgd_classifier_model.pkl'

custon_threshold=0.0

cv = StratifiedKFold(n_splits=6, shuffle=True, random_state=42)

y_train_pred = cross_val_predict(sgd_clf, X_train, y_train, cv=cv, method="decision_function", n_jobs=-1)

precision, recall, f1 = precision_recall_curve(y_train, y_train_pred), accuracy_score(y_train, y_train_pred), f1_score(y_train, y_train_pred)

print(f"Precision: {precision}, Recall: {recall}, F1 Score: {f1}")

precisions, recalls, thresholds = precision_recall_curve(y_train, y_train_pred)
plt.plot(thresholds, precisions[:-1], "b--", label="Precision", linewidth=2)
plt.plot(thresholds, recalls[:-1], "g--", label="Recall", linewidth=2)
plt.axvline(x=custom_threshold, color="k", linestyle="dotted", label=f"Threshold = {custom_threshold}")
plt.xlabel("Decision Threshold")
plt.ylabel("Precision/Recall")
plt.title("Precision-Recall Curve")
plt.legend()
plt.show()